package com.example.samuraitravel.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import com.example.samuraitravel.entity.Favorite;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.repository.FavoriteRepository;
import com.example.samuraitravel.repository.UserRepository;
import com.example.samuraitravel.service.FavoriteService;

@Controller
@RequestMapping("/houses/{houseId}/favorites")
public class FavoriteController {
	private final FavoriteRepository favoriteRepository;
	private final UserRepository userRepository;
	private final FavoriteService favoriteService;
	
	public FavoriteController(FavoriteRepository favoriteRepository, UserRepository userRepository, FavoriteService favoriteService) {
		this.favoriteRepository = favoriteRepository;
		this.userRepository = userRepository;
		this.favoriteService= favoriteService;
	}
	
	// 対象となる宿のレビューを一覧表示
	@GetMapping
	public String index(@PathVariable(name = "userId") Integer houseId,
			            @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
			            Model model) {
		// Userクラスのuserインスタンスを作成し、userIdを用いてuserRepositoryから取得
		User user =userRepository.getReferenceById(userId);
		// Page<Favorite>型のfavoritePageインスタンスを作成し、userとpageableを用いてfavoriteRepositoryから取得
		Page<Favorite> favoritePage = favoriteRepository.findByUserOrderByCreatedAtDesc(user, pageable);
		// それぞれのmodelに "house"・"favoritePage" をキーとして house・favoritePage の属性を追加
		model.addAttribute("user", user);
		model.addAttribute("favoritePage", favoritePage);
		// index.html に表示
		return "reviews/index";
	}
}
