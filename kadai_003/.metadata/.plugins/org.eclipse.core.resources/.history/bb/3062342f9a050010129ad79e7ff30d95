package com.example.samuraitravel.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.samuraitravel.entity.Favorite;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.repository.FavoriteRepository;
import com.example.samuraitravel.repository.UserRepository;
import com.example.samuraitravel.security.UserDetailsImpl;
import com.example.samuraitravel.service.FavoriteService;

@Controller
public class FavoriteController {
	private final FavoriteRepository favoriteRepository;
	private final UserRepository userRepository;
	private final FavoriteService favoriteService;

	public FavoriteController(FavoriteRepository favoriteRepository, UserRepository userRepository,
			FavoriteService favoriteService) {
		this.favoriteRepository = favoriteRepository;
		this.userRepository = userRepository;
		this.favoriteService = favoriteService;
	}

	// 対象となるユーザーのお気に入りを一覧表示
	@GetMapping("/favorites")
	public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			            @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
			            Model model) {

		User user = userDetailsImpl.getUser();
		// Page<Favorite>型のfavoritePageインスタンスを作成し、userとpageableを用いてfavoriteRepositoryから取得
		Page<Favorite> favoritePage = favoriteRepository.findByUserOrderByCreatedAtDesc(user, pageable);
		// modelに "favoritePage" をキーとして favoritePage の属性を追加
		model.addAttribute("favoritePage", favoritePage);
		// index.html に表示
		return "favorites/index";
	}

	// 対象となるユーザーのお気に入りを削除する
	@PostMapping("/{favoriteId}/delete")
	public String delete(@PathVariable(name = "favoriteId") Integer favoriteId) {
		
		favoriteRepository.deleteById(favoriteId);
		
		return "redirect:/houses/{houseId}";
	}
}
