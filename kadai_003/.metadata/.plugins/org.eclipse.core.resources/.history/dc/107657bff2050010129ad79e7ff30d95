package com.example.samuraitravel.controller;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.samuraitravel.entity.House;
import com.example.samuraitravel.entity.Review;
import com.example.samuraitravel.entity.User;
import com.example.samuraitravel.form.ReservationInputForm;
import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.repository.ReviewRepository;
import com.example.samuraitravel.security.UserDetailsImpl;
import com.example.samuraitravel.service.ReviewService;

@Controller
@RequestMapping("/houses")
public class HouseController {
	private final HouseRepository houseRepository;
	private final ReviewRepository reviewRepository;
	private final ReviewService reviewService;
	private final FavoriteRepository favoriteRepository;
	private final FavoriteService favoriteService;
	// デバッグとしてログ出力の追加
	//private static final Logger logger = LoggerFactory.getLogger(HouseController.class);
	
	// コンストラクタ
	// index.htmlの検索ボタンの押下時にまず以下が実行される
	public HouseController(HouseRepository houseRepository,
							ReviewRepository reviewRepository, ReviewService reviewService,
							FavoriteRepository favoriteRepository, FavoriteService favoriteService
							) {
		this.houseRepository = houseRepository;
		this.reviewRepository = reviewRepository;
		this.reviewService = reviewService;
		this.favoriteRepository = favoriteRepository;
		this.favoriteService = favoriteService;
	}
	
	// 民宿の一覧ページ
	@GetMapping
	public String index(@RequestParam(name = "keyword", required = false) String keyword,
			            @RequestParam(name = "area", required = false) String area,
			            @RequestParam(name = "price", required = false) Integer price,
			            @RequestParam(name = "order", required = false) String order,
			            @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
			            Model model) {
		
		Page<House> housePage;
		// キーワード検索
		if (keyword != null && !keyword.isEmpty()) {
			if (order != null && order.equals("priceAsc")) {
				housePage = houseRepository.findByNameLikeOrAddressLikeOrderByPriceAsc("%" + keyword + "%", "%" + keyword + "%", pageable);
			} else {
				housePage = houseRepository.findByNameLikeOrAddressLikeOrderByCreatedAtDesc("%" + keyword + "%", "%" + keyword + "%", pageable);
			}
        // エリア検索
		} else if (area != null && !area.isEmpty()) {
        	if (order != null && order.equals("priceAsc")) {
        		housePage = houseRepository.findByAddressLikeOrderByPriceAsc("%" + area + "%", pageable);
        	} else {
        		housePage = houseRepository.findByAddressLikeOrderByCreatedAtDesc("%" + area + "%", pageable);
        	}
        // 価格検索
		} else if (price != null) {
        	if (order != null && order.equals("priceAsc")) {
        		housePage = houseRepository.findByPriceLessThanEqualOrderByPriceAsc(price, pageable);
        	} else {
        		housePage = houseRepository.findByPriceLessThanEqualOrderByCreatedAtDesc(price, pageable);
        	}
        // その他
		} else {
        	if (order != null && order.equals("priceAsc")) {
        		housePage = houseRepository.findAllByOrderByPriceAsc(pageable);
        	} else {
        		housePage = houseRepository.findAllByOrderByCreatedAtDesc(pageable);
        	}
        }                
        
		// houses/index.htmlのページに値を渡している
        model.addAttribute("housePage", housePage);
        model.addAttribute("keyword", keyword);
        model.addAttribute("area", area);
        model.addAttribute("price", price);
        model.addAttribute("order", order);
        
        return "houses/index";
	}
	
	// 民宿詳細ページ
	@GetMapping("/{id}")
	public String show(@PathVariable(name = "id") Integer id,
			           @PageableDefault(page = 0, size = 6, sort = "id", direction = Direction.ASC) Pageable pageable,
			           @AuthenticationPrincipal UserDetailsImpl userDetailsImpl,
			           Model model) {
		
		House house = houseRepository.getReferenceById(id);
		// インスタンスの初期化
		boolean hasUserAlreadyReviewed = false; 
		boolean findByHouseAndUser = false;
		// ログイン済ならレビューが投稿できる
		if (userDetailsImpl != null ) {
			// ユーザー情報の取得
			User user = userDetailsImpl.getUser();
			// そのユーザーのレビューの有無をチェック
			hasUserAlreadyReviewed = reviewService.hasUserAlreadyReviewed(house, user);
		}
		
		// 宿のレビューを取得
		List<Review> newReviews = reviewRepository.findTop6ByHouseOrderByCreatedAtDesc(house);
		// 総レビュー数の取得
		long totalReviewCount = reviewRepository.countByHouse(house);
		
		// デバッグとしてレビュー数をログに出力
		//logger.info("Number of reviews: " + newReviews.getTotalElements()); //(newReviews != null ? newReviews.getSize() : "null"));
		// デバッグ: newReviewsの状態をログに出力
        //logger.info("Number of reviews: " + newReviews.getSize()); // 1ページの表示数 @PageableDefault の size = 6,だからNumber of reviews: 6 となるはず
        // デバッグのためログ出力
        //logger.info("Number of reviews: " + (newReviews != null ? newReviews.getTotalElements() : "null"));
		
		model.addAttribute("house", house);
		model.addAttribute("reservationInputForm", new ReservationInputForm());
		model.addAttribute("newReviews", newReviews);
		model.addAttribute("hasUserAlreadyReviewed", hasUserAlreadyReviewed);
		model.addAttribute("totalReviewCount", totalReviewCount);
		
		return "houses/show";
	}
}